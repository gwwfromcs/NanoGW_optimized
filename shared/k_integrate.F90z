#include "../shared/mycomplex.h"
!===================================================================
!
! Calculates the kernel in parallel and stores in structures k_tmp.
! Several k_tmp structures are calculated, as many as necessary to
! cover the kernel in k_mat.
!
! Copyright (C) 2009 Murilo L. Tiago, http://users.ices.utexas.edu/~mtiago
! This file is part of RGWBS. It is distributed under the GPL v1.
!
!-------------------------------------------------------------------
subroutine Zk_integrate(gvec,kpt,k_mat,k_tmp,irp,kflag,nspin,nbuff_max,qkt_in)

  use typedefs
  use mpi_module
  use fft_module
  use xc_functionals
  implicit none
#ifdef MPI
  include 'mpif.h'
#endif

  ! arguments
  ! real-space grid
  type (gspace), intent(inout) :: gvec
  ! k-points and electron wavefunctions
  type (kptinfo), intent(in) :: kpt
  ! kernel
  type (kernelinfo), intent(in) :: k_mat
  ! temporary space where integrals are stored
  type (kernel_scratch), intent(inout) :: k_tmp(nbuff_max)
  ! current representation, kernel flag (see parent routine),
  ! number of spin channels, buffer size
  integer, intent(in) :: irp, kflag, nspin, nbuff_max
  ! current q-vector
  real(dp), intent(in) :: qkt_in(3)

  ! local variables
  type(xc_type) :: xc_lda
  real(dp), parameter :: tol_l = 1.d-8
  character (len=800) :: lastwords
  logical :: sympair, lphase
#ifndef CPLX
  logical :: outflag
#endif
  integer :: ii, jj, nn, m1, m2, m3, m4, k1, k2, k3, k4, m3old, iblock, &
       isp, i_row, ipe, ioff, nelem, istart, jcount, dicount, ipe_count, &
       icc, ngrid, ngrid_pe, info, mycount, ncount, ncache, rsp, csp, &
       startrow(2), endrow(2), startcol(2), endcol(2)
  real(dp) :: fac, tsec(2), qkt(3), qkt_test(3)

  integer, dimension(:,:), allocatable :: ipe_quadr
  real(dp), dimension(:,:,:), allocatable :: fxc
  SCALAR, dimension(:), allocatable :: wfn2, fwfn12, fwfn123, rho_h, &
       my_matrix, sphase
  SCALAR, dimension(:,:,:), allocatable :: zfxc
  ! external functions (BLAS)
  SCALAR, external :: Zdot_c

  ! WG debug
  integer :: outdbg

  outdbg = peinf%inode+198812

  ngrid_pe = w_grp%ldn * w_grp%npes
  ngrid = w_grp%mydim
  write(outdbg,*) " ngrid_pe = w_grp%ldn * w_grp%npes = ", ngrid_pe
  write(outdbg,*) " w_grp%npes = ", w_grp%npes
  write(outdbg,*) " ngrid = w_grp%mydim = ", w_grp%mydim
  write(outdbg,*) " w_grp%ldn = ", w_grp%ldn
  write(outdbg,*) " k_mat%lcache = ", k_mat%lcache

  !-------------------------------------------------------------------
  ! Allocate data.
  !
  ncache = ngrid / k_mat%lcache
  if ( ncache * k_mat%lcache < ngrid ) ncache = ncache + 1
  write(outdbg,*) " ncache = ngrid / k_mat%lcache = ", ncache

  allocate(wfn2(ngrid_pe),stat=info)
  call alccheck('wfn2','k_integrate',ngrid_pe,info)
  wfn2 = Zzero
  allocate(fwfn12(ngrid_pe),stat=info)
  call alccheck('fwfn12','k_integrate',ngrid_pe,info)
  allocate(fwfn123(k_mat%lcache))
  iblock = 1
  k_tmp(iblock)%nblock = 0
  allocate(k_tmp(iblock)%quadr(10,k_tmp(iblock)%nblock_max))
  k_tmp(iblock)%quadr = 0
  allocate(k_tmp(iblock)%Zm_f(k_tmp(iblock)%nblock_max))
  k_tmp(iblock)%Zm_f = Zzero
  allocate(ipe_quadr(10,k_mat%ncol))
  ipe_quadr = 0
  allocate(my_matrix(k_mat%ncol))
  my_matrix = Zzero
  allocate(rho_h(w_grp%nr))

  ! WG debug 
#ifdef DEBUG 
  if (peinf%master) then
    write(6,*) "dbg ngrid = ", ngrid
    write(6,*) "dbg k_mat%lcache = ", k_mat%lcache
    write(6,*) "dbg ncache = ", ncache
    write(6,*) "dbg ngrid_pe = ", ngrid_pe
    write(6,*) "dbg w_grp%ldn = ", w_grp%ldn
  endif
#endif

#ifdef CPLX
  allocate(sphase(ngrid_pe),stat=info)
  call alccheck('sphase','k_integrate',ngrid_pe,info)
  sphase = Zzero
  lphase = .false.
#endif

  !-------------------------------------------------------------------
  ! Calculate coulomb interaction,
  ! V_coul = 4*pi*e^2/q^2 (rydberg units, e^2 = 2).
  !
  call Zinitialize_FFT(peinf%inode,fft_box)
  qkt = qkt_in
  if (gvec%per == 1) then
     call Zcreate_coul_1D(peinf%inode,peinf%npes,peinf%comm,qkt(1),gvec,fft_box)
  elseif (gvec%per == 2) then
     call Zcreate_coul_2D(gvec%bdot,qkt(1),fft_box)
  else
     call Zcreate_coul_0D(gvec%bdot,qkt,fft_box)
  endif

  !-------------------------------------------------------------------
  ! Calculate LDA kernel.
  !
  allocate(zfxc(ngrid,nspin,nspin),stat=info)
  call alccheck('zfxc','k_integrate',ngrid*nspin*nspin,info)
  allocate(fxc(ngrid,nspin,nspin),stat=info)
  call alccheck('fxc','k_integrate',ngrid*nspin*nspin,info)
  fxc = zero
  do isp = 1, nspin
     do ii = 1, ngrid
        fxc(ii,isp,1) = kpt%rho(w_grp%offset+ii,isp)
     enddo
  enddo
  call xc_init(nspin,XC_LDA_X,XC_LDA_C_PZ,0,zero,one,.false.,xc_lda)
  xc_lda%has_grad = .false.
  call fxc_get(xc_lda,nspin,ngrid,kflag,fxc)
  call xc_end(xc_lda)
  zfxc = fxc
  deallocate(fxc)

  if (r_grp%master) call stopwatch(r_grp%master, &
       'Starting calculation of kernel')

  !-------------------------------------------------------------------
  ! Start calculating rows of kernel matrix elements from the end:
  ! first PE receives last row, second PE receives the previous
  ! one, until all rows are calculated.
  ! This procedure helps load balance: longer rows are likely to
  ! be done before shorter ones, and each PE receives an equal
  ! amount of long and short rows.
  !
  fac = real(gvec%syms%ntrans,dp)/gvec%hcub
  startrow(1) = 1
  endrow(1) = k_mat%nrow_up
  startrow(2) = k_mat%nrow_up + 1
  endrow(2) = k_mat%nrow
  startcol(1) = 1
  endcol(1) = k_mat%ncol_up
  startcol(2) = k_mat%ncol_up + 1
  endcol(2) = k_mat%ncol
  write(outdbg, '(a,I6)') " startrow(1) = ", startrow(1)
  write(outdbg, '(a,I6)') " endrow(1) = ", endrow(1)
  write(outdbg, '(a,I6)') " startcol(1) = ", startcol(1)
  write(outdbg, '(a,I6)') " endcol(1) = ", endcol(1)
  write(outdbg, '(a,I6)') " startrow(2) = ", startrow(2)
  write(outdbg, '(a,I6)') " endrow(2) = ", endrow(2)
  write(outdbg, '(a,I6)') " startcol(2) = ", startcol(2)
  write(outdbg, '(a,I6)') " endcol(2) = ", endcol(2)
  write(outdbg, '(2(a,I6))') " peinf%inode = ", peinf%inode, ", w_grp%mygr = ", w_grp%mygr

  ! Go over the blocks of spin matrices.
  ncount = 0
  jcount = 0
  do rsp = 1, nspin
     do csp = 1, nspin
        write(outdbg, '(A, I6, A, I6)') ' - loop rsp =',rsp,' csp =', csp
        do i_row = startrow(rsp), endrow(rsp), r_grp%npes
           write(outdbg, '(a,I6)') " -- loop i_row = ", i_row
           do ipe = 0, w_grp%npes - 1
              ii = w_grp%mygr*w_grp%npes + i_row + ipe
              ioff = w_grp%ldn*ipe + 1
              write(outdbg, '(3(a,I6))') " --- ipe = ",ipe, ", ii = ", ii, " ioff = ", ioff
              if (ii > endrow(rsp)) cycle
  !
  ! Compute LDA potential, fwfn12  --> f_lda | m1* m2 >.
  !
              m1 = k_mat%row(1,ii)
              m2 = k_mat%row(2,ii)
              k1 = k_mat%row(3,ii)
              k2 = k_mat%row(4,ii)
              jj = kpt%wfn(rsp,k1)%map(m1)
              write(outdbg, '(a,4I6)') "m1 m2 k1 k2", m1, m2, k1, k2
              ! wfn2 has been initialized to zero, so it is fine when w_grp%ldn > w_grp%mydim
              ! if wfn2 is not initialized to zero and w_grp%ldn > w_grp%mydim, then there 
              ! are some undefined elements in fwfn12 
              call Zcopy(ngrid,kpt%wfn(rsp,k1)%Zwf(1,jj),1,wfn2(ioff),1)
              wfn2 = MYCONJG(wfn2)
              jj = kpt%wfn(rsp,k2)%map(m2)
              ! wfn2 = | m1* m2 > on irreducible wedge
              call Zmultiply_vec(ngrid,kpt%wfn(rsp,k2)%Zwf(1,jj),wfn2(ioff))
              ! fwfn12 = fxc | m1* m2 > on irreducible wedge
              if (kflag > 0) then
                 call Zcopy(ngrid,wfn2(ioff),1,fwfn12(ioff),1)
                 call Zmultiply_vec(ngrid,zfxc(1,rsp,csp),fwfn12(ioff))
              endif
              write(outdbg, '(5f10.5)') fwfn12(ioff:ioff+4)
           enddo ! do ipe = 0, w_grp%npes - 1
  !
  ! Compute Coulomb potential, wfn2 --> V_coul | m1* m2 >.
  ! We do this by solving the Poisson eq. in reciprocal space.
  ! At the end, add it to LDA potential.
  !
           ii = w_grp%mygr*w_grp%npes + i_row + w_grp%inode
           if (kflag < 2) then
              ! now rho_h contains |m1* m2 > on full grid
              call Zgather(1,wfn2,rho_h)
              if (ii <= endrow(rsp)) then

                 ! If necessary, update the Coulomb interaction.
                 k1 = k_mat%row(3,ii)
                 k2 = k_mat%row(4,ii)
                 qkt_test = kpt%fk(:,k2) - kpt%fk(:,k1) - qkt

                 if (dot_product(qkt_test,qkt_test) > tol_l) then
#ifdef DEBUG
                    if (peinf%master) then
                       write(6,*) ' WARNING: q-point has changed '
                       write(6,*) k1, kpt%fk(:,k1)
                       write(6,*) k2, kpt%fk(:,k2)
                       write(6,*) ' old q-vector ', qkt
                       write(6,*) ' new q-vector ', kpt%fk(:,k2) - kpt%fk(:,k1)
                    endif
#endif
                    qkt = kpt%fk(:,k2) - kpt%fk(:,k1)
                    if (gvec%per == 1) then
                       call Zcreate_coul_1D(peinf%inode,peinf%npes,peinf%comm,qkt(1),gvec,fft_box)
                    elseif (gvec%per == 2) then
                       call Zcreate_coul_2D(gvec%bdot,qkt(1),fft_box)
                    else
                       call Zcreate_coul_0D(gvec%bdot,qkt,fft_box)
                    endif
                 endif

                 call Zpoisson(gvec,rho_h,irp)
              endif
              call Zscatter(1,wfn2,rho_h)
           endif
           if (kflag == 1) then
              call Zaxpy(ngrid_pe,one,wfn2,1,fwfn12,1)
           elseif (kflag == 0) then
              call Zcopy(ngrid_pe,wfn2,1,fwfn12,1)
           endif
  !
  ! Determine which pairs (m3,m4) will be included.
  ! Indices for the important pairs will be stored in
  ! quadr(:,jcount+1:jcount+mycount).
  !
           mycount = 0
           if (ii <= endrow(rsp)) then
              m1 = k_mat%row(1,ii)
              m2 = k_mat%row(2,ii)
              k1 = k_mat%row(3,ii)
              k2 = k_mat%row(4,ii)
              sympair = .false.
              if (rsp == csp) then
                 do jj = startcol(rsp), endcol(rsp)
                    if (k_mat%col(1,jj) == m1 .and. k_mat%col(2,jj) == m2 &
                         .and. k_mat%col(3,jj) == k1 .and. k_mat%col(4,jj) == k2) then
                       sympair = .true.
                       exit
                    endif
                 enddo
              endif
              do jj = startcol(csp), endcol(csp)
                 m3 = k_mat%col(1,jj)
                 m4 = k_mat%col(2,jj)
                 k3 = k_mat%col(3,jj)
                 k4 = k_mat%col(4,jj)
  !
  ! Apply symmetrizations to quadruplet (m1,m2,m3,m4) 
  ! and skip this matrix element if a similar one is calculated.
  !
#ifndef CPLX
                 call select1234(k_mat,gvec%syms,m1,m2,m3,m4,csp, &
                      kpt%wfn(rsp,k1)%jrep(0,m1), &
                      kpt%wfn(rsp,k2)%jrep(0,m2), &
                      kpt%wfn(csp,k3)%jrep(0,m3), &
                      kpt%wfn(csp,k4)%jrep(0,m4), &
                      sympair,outflag)
                 if (.not.outflag) cycle
#endif

                 mycount = mycount + 1

                 if (jcount+mycount > k_tmp(iblock)%nblock_max) then
                    write(lastwords,*) 'ERROR: buffer size too small! ', &
                         jcount+mycount, k_tmp(iblock)%nblock_max, iblock
                    call die(lastwords)
                 endif

                 k_tmp(iblock)%quadr(1,jcount+mycount) = m1
                 k_tmp(iblock)%quadr(2,jcount+mycount) = m2
                 k_tmp(iblock)%quadr(3,jcount+mycount) = m3
                 k_tmp(iblock)%quadr(4,jcount+mycount) = m4
                 k_tmp(iblock)%quadr(5,jcount+mycount) = k1
                 k_tmp(iblock)%quadr(6,jcount+mycount) = k2
                 k_tmp(iblock)%quadr(7,jcount+mycount) = k3
                 k_tmp(iblock)%quadr(8,jcount+mycount) = k4
                 k_tmp(iblock)%quadr(9,jcount+mycount) = rsp
                 k_tmp(iblock)%quadr(10,jcount+mycount) = csp
                 write(outdbg, '(A, I6, A, 4I6)') " --- mycount: ", mycount, ", calculate", m1,m2,m3,m4
              enddo ! do jj = startcol, endcol
           endif ! if ii <= endrow(rsp)
  !
  ! Calculate kernel matrix elements involving pair (m3,m4).
  !
           write(outdbg, '(A)') " -- start to calculate matrix elements involving pair m3,m4 --- "
           call timacc(13,1,tsec)
           do ipe = 0, w_grp%npes - 1
              if (ipe == w_grp%inode) ipe_count = mycount
#ifdef MPI
              call MPI_BCAST(ipe_count,1,MPI_INTEGER,ipe,w_grp%comm,info)
#endif
              if (ipe_count < 1) cycle
              if (ipe == w_grp%inode) ipe_quadr(:,1:mycount) = &
                   k_tmp(iblock)%quadr(:,jcount+1:jcount+mycount)
#ifdef MPI
              call MPI_BCAST(ipe_quadr,10*ipe_count, &
                   MPI_INTEGER,ipe,w_grp%comm,info)
#endif
              write(outdbg,'(3(A,I6))') " --- peinf%inode", peinf%inode, ", ipe = ", ipe, ", ipe_count = ", ipe_count
              my_matrix = Zzero
              ioff = w_grp%ldn*ipe
              fwfn123 = Zzero
              istart = 1
              nelem = k_mat%lcache
              if ( k_mat%lcache * ncache > ngrid ) nelem = &
                   nelem + ngrid - k_mat%lcache*ncache
              do icc = 1, ncache
                 write(outdbg, '(A,I5)') " ---- icc =", icc
                 write(outdbg,'(A,I6)') " ---- nelem =", nelem
                 write(outdbg,'(A,I6)') " ---- istart =", istart
                 m3old = 0
                 do dicount = 1, ipe_count
                    m1 = ipe_quadr(1,dicount)
                    m2 = ipe_quadr(2,dicount)
                    m3 = ipe_quadr(3,dicount)
                    m4 = ipe_quadr(4,dicount)
                    k1 = ipe_quadr(5,dicount)
                    k2 = ipe_quadr(6,dicount)
                    k3 = ipe_quadr(7,dicount)
                    k4 = ipe_quadr(8,dicount)
                    write(outdbg, '(A,I5,A,4I5)') " ----- dicount", dicount, ", m1 m2 m3 m4", m1,m2,m3,m4
#ifdef CPLX
                    ! Add a phase if necessary.
                    qkt_test = kpt%fk(:,k4) - kpt%fk(:,k3) + kpt%fk(:,k1) - kpt%fk(:,k2)
                    if (dot_product(qkt_test,qkt_test) > tol_l) then
#ifdef DEBUG
                       write(6,*) ' WARNING: non-zero phase has changed '
                       write(6,*) k1, kpt%fk(:,k1)
                       write(6,*) k2, kpt%fk(:,k2)
                       write(6,*) k3, kpt%fk(:,k3)
                       write(6,*) k4, kpt%fk(:,k4)
                       write(6,*) ' phase vector = ',qkt_test
#endif
                       call Zget_phase(gvec,istart,nelem,qkt_test,sphase)
                       lphase = .true.
                    else
                       lphase = .false.
                    endif
#endif

                    if (m3 /= m3old) then
                       m3old = m3
                       ! fwfn123 --> < m3* | F | m1* m2 >
                       jj = kpt%wfn(csp,k3)%map(m3)
                       call Zcopy(nelem,kpt%wfn(csp,k3)%Zwf(istart,jj),1,fwfn123,1)
#ifdef CPLX
                       if (lphase) call Zmultiply_vec(nelem,sphase,fwfn123)
#endif
                       call Zmultiply_vec(nelem,fwfn12(istart+ioff),fwfn123)
                    endif

                    ! matrix_f = < m3* m4 | F | m1* m2 >
                    jj = kpt%wfn(csp,k4)%map(m4)

                    my_matrix(dicount) = my_matrix(dicount) + &
                         Zdot_c(nelem,fwfn123,1,kpt%wfn(csp,k4)%Zwf(istart,jj),1) * fac

                 enddo ! do dicount loop
                 istart = istart + nelem
                 nelem = k_mat%lcache
              enddo ! do icc = 1, ncache
#ifdef MPI
              call MPI_REDUCE(my_matrix,k_tmp(iblock)%Zm_f(jcount+1), &
                   ipe_count,MPI_DOUBLE_SCALAR,MPI_SUM,ipe,w_grp%comm,info)
              if (w_grp%inode .eq. ipe) then
                 do dicount = 1, ipe_count
                    m1 = ipe_quadr(1,dicount)
                    m2 = ipe_quadr(2,dicount)
                    m3 = ipe_quadr(3,dicount)
                    m4 = ipe_quadr(4,dicount)
                    write(outdbg, '( i5," <",2i4,"|F|",2i4,">",e16.5)') dicount,m3,m4,m1,m2,k_tmp(iblock)%Zm_f(jcount+dicount)
                 enddo
              endif
#else
              call Zcopy(ipe_count,my_matrix,1,k_tmp(iblock)%Zm_f(jcount+1),1)
#endif
           enddo ! do ipe loop
           write(outdbg, '(A)') " -- finished calculating matrix elements involving pair m3,m4 --- "
           call timacc(13,2,tsec)
           jcount = jcount + mycount
           write(outdbg,'(A,I6)') " -- jcount = ", jcount
  !
  ! Are we close to filling up buffer arrays? If so, print out
  ! calculated matrix elements.
  !
  ! jcount is a counter for the number of computed matrix elements before
  ! last output on disk by the current PE
  ! ncount is a cumulative counter of computed matrix elements
  !
           if (jcount+k_mat%ncol >= k_tmp(iblock)%nblock_max) then
              k_tmp(iblock)%nblock = jcount
#ifdef DEBUG
              nn = 64 + peinf%inode
              do jj = 1, jcount
                 write(nn,'(4i6,6i3,2g20.10)') k_tmp(iblock)%quadr(:,jj), &
#ifdef CPLX
                      real(k_tmp(iblock)%Zm_f(jj),dp), imag(k_tmp(iblock)%Zm_f(jj))
#else
                      k_tmp(iblock)%Zm_f(jj)
#endif
              enddo
              call flush(nn)
#endif
              ncount = ncount + jcount
              jcount = 0
              if (r_grp%master) then
                 call stopwatch(r_grp%master,' Kernel matrix calculation ')
                 write(6,'(i10,a,i3,a,i2,a,2i2)') ncount, &
                      ' matrix elements calculated by PE', &
                      peinf%inode,' representation ',irp,' spin ',rsp, csp
                 call flush(6)
              endif

              iblock = iblock + 1
              if (iblock > nbuff_max) then
                 write(lastwords,*) 'ERROR: too few buffer structures ! ', &
                      iblock, nbuff_max
                 call die(lastwords)
              endif
              k_tmp(iblock)%nblock = 0
              allocate(k_tmp(iblock)%quadr(10,k_tmp(iblock)%nblock_max),stat=info)
              write(lastwords,'(a,i5.5)') 'k_tmp%quadr_',iblock
              call alccheck(trim(lastwords),'k_integrate', &
                   10*k_tmp(iblock)%nblock_max,info)
              k_tmp(iblock)%quadr = 0
              allocate(k_tmp(iblock)%Zm_f(k_tmp(iblock)%nblock_max),stat=info)
              write(lastwords,'(a,i5.5)') 'k_tmp%m_f_',iblock
              call alccheck(trim(lastwords),'k_integrate', &
                   k_tmp(iblock)%nblock_max,info)
              k_tmp(iblock)%Zm_f = Zzero
           endif
        enddo ! do i_row = startrow(rsp), endrow(rsp), r_grp%npes
        !
        !  Finished!
        !  Write last computed matrix elements to disk.
        !
        k_tmp(iblock)%nblock = jcount
#ifdef DEBUG
        nn = 64 + peinf%inode
        do jj = 1, jcount
           write(nn,'(4i6,6i3,2g20.10)') k_tmp(iblock)%quadr(:,jj), &
#ifdef CPLX
                real(k_tmp(iblock)%Zm_f(jj),dp), &
                imag(k_tmp(iblock)%Zm_f(jj))
#else
                k_tmp(iblock)%Zm_f(jj)
#endif
        enddo
        call flush(nn)
#endif
        ncount = ncount + jcount
        jcount = 0

        iblock = iblock + 1
        if (iblock > nbuff_max) then
           write(lastwords,*) 'ERROR: too few buffer structures ! ', &
                iblock, nbuff_max
           call die(lastwords)
        endif
        k_tmp(iblock)%nblock = 0
        allocate(k_tmp(iblock)%quadr(10,k_tmp(iblock)%nblock_max),stat=info)
        write(lastwords,'(a,i5.5)') 'k_tmp%quadr_',iblock
        call alccheck(trim(lastwords),'k_integrate', &
             10*k_tmp(iblock)%nblock_max,info)
        k_tmp(iblock)%quadr = 0
        allocate(k_tmp(iblock)%Zm_f(k_tmp(iblock)%nblock_max),stat=info)
        write(lastwords,'(a,i5.5)') 'k_tmp%m_f',iblock
        call alccheck(trim(lastwords),'k_integrate', &
             k_tmp(iblock)%nblock_max,info)
        k_tmp(iblock)%Zm_f = Zzero
     enddo ! do csp
  enddo ! do rsp
  !-------------------------------------------------------------------
  ! Deallocate data, do printout, etc.
  !
  if (r_grp%master) then
     write(6,'(a,i10,a,a,i3,a,i2)') 'Kernel done! ',ncount,' matrix ', &
          'elements calculated by PE',peinf%inode,' representation ',irp
     write(6,*) 'Buffer sizes: ',iblock
     write(6,*) (k_tmp(nn)%nblock,nn=1,iblock)
     write(6,*)
     write(6,*) (k_tmp(nn)%nblock_max,nn=1,iblock)
     write(6,*)
     call flush(6)
  endif
  write(outdbg,'(a,i10)') 'peinf%inode', peinf%inode
  write(outdbg,'(a,i10,a,a,i3,a,i2)') 'Kernel done! ',ncount,' matrix ', &
        'elements calculated by PE',peinf%inode,' representation ',irp
  write(outdbg,*) 'Buffer sizes: ',iblock
  write(outdbg,*) (k_tmp(nn)%nblock,nn=1,iblock)
  write(outdbg,*)
  write(outdbg,*) (k_tmp(nn)%nblock_max,nn=1,iblock)
  write(outdbg,*)


  call Zfinalize_FFT(peinf%inode,fft_box)

  deallocate(zfxc)
#ifdef CPLX
  deallocate(sphase)
#endif
  deallocate(rho_h)
  deallocate(my_matrix)
  deallocate(ipe_quadr)
  deallocate(wfn2, fwfn12, fwfn123)

end subroutine Zk_integrate
!===================================================================
